/*! Pie Chart Creator v1.0.0 | Copyright 2018 Weronika KÄ™dziora */

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// creating required number of slices for fill data (name and value)
var createDataForm = function createDataForm(nr) {
  var chartContainer = document.querySelector('.article--chart');
  var formContent = document.querySelector('.form__content');
  var sectionDetails = document.querySelector('.section--itemsData');
  sectionDetails.style.display = "block";
  var currentNrOfSlices = document.querySelectorAll('.form__slice').length;

  if (currentNrOfSlices > nr) {
    formContent.removeChild(formContent.lastChild);
    createDataForm(nr);
  } else {
    for (var i = currentNrOfSlices; i < nr; i++) {
      var divSlice = document.createElement('div');
      divSlice.classList.add('form__slice');
      divSlice.innerHTML = "\n        <h3 class=\"title\">Slice ".concat(i + 1, "</h3>\n        <div class=\"form__data\">\n          <label for=\"inputName").concat(i, "\" class=\"form__label\">Name: </label>\n          <input id=\"inputName").concat(i, "\" type=\"text\" class=\"form__input sliceName\">\n        </div>\n        <div class=\"form__data data data--value\">\n          <label for=\"inputValue").concat(i, "\" class=\"form__label\">Value: </label>\n          <input id=\"inputValue").concat(i, "\" type=\"number\" min=\"0\" class=\"form__input sliceValue\" placeholder=\"Write only numbers\">\n        </div>\n      ");
      formContent.appendChild(divSlice);
    }
  }

  if (currentNrOfSlices <= nr && chartContainer.style.display === "flex") {
    createPieChart();
  }
}; // event for sumbit first form and create second form


var buttonMainData = document.querySelector('.button--mainData');
buttonMainData.addEventListener('click', function () {
  var chosenOption = document.querySelector('.select--numberOfItems');
  createDataForm(chosenOption.selectedIndex + 2);
}); // function gettings inputs values

var getValues = function getValues(inputsClass) {
  var dataNames = document.querySelectorAll(".".concat(inputsClass));
  var dataNamesArr = [];
  dataNames.forEach(function (input) {
    dataNamesArr.push(input.value);
  });
  return dataNamesArr;
}; // generating table of colors for slices


var hexToDec = function hexToDec(val) {
  return parseInt(val, 16);
};

var decToHex = function decToHex(val) {
  return val !== 0 ? val.toString(16) : '00';
};

var getColorsArray = function getColorsArray(col1, nrOfSlices) {
  var getHexaColorsArray = function getHexaColorsArray(rgb) {
    var step = ~~((255 - Math.min.apply(Math, _toConsumableArray(rgb))) / nrOfSlices);

    var getNewColor = function getNewColor(rgb, i) {
      return rgb.map(function (x) {
        return Math.min(x + step * i, 255);
      });
    };

    var getNewRGB = function getNewRGB(col, nr) {
      return Array(nr).fill(col).map(getNewColor);
    };

    var newRGB = getNewRGB(rgb, nrOfSlices);
    return newRGB.map(function (rgb) {
      return ['#'].concat(_toConsumableArray(rgb.map(decToHex))).join('');
    });
  };

  return getHexaColorsArray(col1);
}; // getting neessery data for draw chart


var getData = function getData() {
  var dataNames = getValues('sliceName');
  var dataValues = getValues('sliceValue');
  var numberOfSlices = dataValues.length;
  var leadingColor = document.querySelector('.input--color').value;
  var leadingColorRGB = leadingColor.match(/../g).map(hexToDec);
  var colors = getColorsArray(leadingColorRGB, numberOfSlices); // creating data array from the biggest to the smallest

  var sum = dataValues.reduce(function (a, b) {
    return a * 1 + b * 1;
  }, 0);
  var percentage = dataValues.map(function (x) {
    return Math.round(x * 1000 / sum / 10);
  });

  var getBasicDataForArr = function getBasicDataForArr(x) {
    var getDataArr = function getDataArr(i) {
      return {
        name: dataNames[i],
        value: dataValues[i],
        percent: percentage[i]
      };
    };

    for (var i in dataNames) {
      x.push(getDataArr(i));
    }
  };

  var dataArr = [];
  getBasicDataForArr(dataArr);
  dataArr.sort(function (a, b) {
    return a.value - b.value;
  }).reverse();

  var addColorToArr = function addColorToArr(arr) {
    return arr.map(function (x, i) {
      return x.color = colors[i];
    });
  };

  addColorToArr(dataArr);
  var percentageSum = percentage.reduce(function (a, b) {
    return a * 1 + b * 1;
  }, 0);

  if (percentageSum !== 100) {
    dataArr[0].percent += 100 - percentageSum;
  }

  return dataArr;
}; // creating chart function


var createPieChart = function createPieChart() {
  var chartContainer = document.querySelector('.article--chart');
  chartContainer.style.display = "flex";
  var titleContainer = document.querySelector('.title--chart');
  var chartTitle = document.querySelector('#chartTitle').value;
  titleContainer.textContent = chartTitle;
  var dataArr = getData(); // creating SVG chart

  var radius = svg.style.width.slice(0, -2) / 2;
  var rotation = 0;

  var calculateDeg = function calculateDeg(percent) {
    return 360 * percent / 100;
  };

  var calculateBaseDeg = function calculateBaseDeg(deg) {
    return deg > 180 ? 360 - deg : deg;
  };

  var calculateRadian = function calculateRadian(baseDeg) {
    return baseDeg * Math.PI / 180;
  };

  var calculateRatios = function calculateRatios(percent) {
    var deg = calculateDeg(percent);
    var baseDeg = calculateBaseDeg(deg);
    var radians = calculateRadian(baseDeg);
    var sweep = radians > Math.PI ? '1' : '0';
    var valueZ = Math.sqrt(2 * Math.pow(radius, 2) * (1 - Math.cos(radians)));
    var baseValX = baseDeg <= 90 ? radius * Math.sin(radians) : radius * Math.sin((180 - baseDeg) * Math.PI / 180);
    var valueX = deg <= 180 ? baseValX + radius : radius - baseValX;
    var valueY = Math.sqrt(Math.pow(valueZ, 2) - Math.pow(baseValX, 2));
    return [deg, sweep, valueX, valueY];
  };

  var drawSlice = function drawSlice(data, i) {
    var _calculateRatios = calculateRatios(data.percent),
        _calculateRatios2 = _slicedToArray(_calculateRatios, 4),
        deg = _calculateRatios2[0],
        sweep = _calculateRatios2[1],
        valueX = _calculateRatios2[2],
        valueY = _calculateRatios2[3];

    var svg = document.querySelector('.svg');

    if (data.percent === 100) {
      var newCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      newCircle.setAttributeNS(null, 'cx', "".concat(radius));
      newCircle.setAttributeNS(null, 'cy', "".concat(radius));
      newCircle.setAttributeNS(null, 'r', "".concat(radius));
      newCircle.setAttributeNS(null, 'fill', data.color);
      newCircle.textContent = "Name: ".concat(data.name, ", Value: ").concat(data.value, ", Percent: ").concat(data.percent, "%");
      svg.appendChild(newCircle);
    } else {
      var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      newPath.setAttributeNS(null, 'd', "M".concat(radius, ",").concat(radius, " L").concat(radius, ",0 A").concat(radius, ",").concat(radius, " ").concat(sweep, " 1,1 ").concat(valueX, ", ").concat(valueY, " z"));
      newPath.setAttributeNS(null, 'fill', data.color);
      newPath.setAttributeNS(null, 'transform', "rotate(".concat(rotation, ", ").concat(radius, ", ").concat(radius, ")"));
      rotation += deg;
      newPath.textContent = "Name: ".concat(data.name, ", Value: ").concat(data.value, ", Percent: ").concat(data.percent, "%");
      svg.appendChild(newPath);
    }
  };

  for (var i = 0; i < dataArr.length; i++) {
    drawSlice(dataArr[i], i);
  }
}; // invoking drawing pie chart (check validate inputs)


var buttonCreateChart = document.querySelector('.button--createChart');
buttonCreateChart.addEventListener('click', function () {
  var dataValues = getValues('sliceValue');
  dataValues.every(function (x) {
    return !isNaN(x) && x > 0;
  }) && createPieChart();
}); // Tooltip

var svg = document.querySelector('.svg');
var tooltip = document.querySelector('.tooltip');
svg.addEventListener('mousemove', function (e) {
  if (e.target.nodeName === 'path' || e.target.nodeName === 'circle') {
    tooltip.style.left = "".concat(e.clientX + 20, "px");
    tooltip.style.top = "".concat(e.clientY - 30, "px");
    tooltip.style.display = 'block';
    tooltip.textContent = e.target.textContent;
  }
});
svg.addEventListener('mouseout', function (e) {
  if (e.target.nodeName === 'path' || e.target.nodeName === 'circle') {
    tooltip.style.display = 'none';
  }
});

/***/ })
/******/ ]);